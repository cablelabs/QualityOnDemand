openapi: 3.0.3
info:
  title: QoD for enhanced communication
  description: Service Enabling Network Function API for QoS control
  termsOfService: http://swagger.io/terms/
  contact:
    email: project-email@sample.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.9.0-wip
externalDocs:
  description: Product documentation at Camara
  url: https://github.com/camaraproject/
security:
  - oAuth2ClientCredentials: []
servers:
  - url: "{apiRoot}/{basePath}"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root
      basePath:
        default: qod/v0
        description: Base path for the QoD API
paths:
  /sessions:
    post:
      tags:
        - QoS sessions
      summary: Creates a new session
      description: Creates a new QoS session on demand
      operationId: createSession
      requestBody:
        description: Creates a new session
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSession"
        required: true
      callbacks:
        notifications:
          "{$request.body#/notificationUrl}/notifications":
            $ref: "#/paths/~1notifications"
      responses:
        "201":
          description: Session created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionInfo"
        "400":
          description: Invalid input for createSession operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              examples:
                Generic400:
                  summary: Schema validation failed
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Schema validation failed at  ..."
                PhoneNumberRequired:
                  summary: Phone number is required as part of device
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Expected property is missing: device.phoneNumber"
                Ipv4AddressRequired:
                  summary: ipv4Address is required as part of device
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Expected property is missing: device.ipv4Address"
                IpAddressRequired:
                  summary: Some IP address is required as part of device
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Expected property is missing: device.ipv4Address or device.ipv6Address"
                DevicePortsRequired:
                  summary: devicePorts is required
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Expected property is missing: devicePorts"
                QoSProfileRequired:
                  summary: qosProfile is required
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Expected property is missing: qosProfile"
                DevicePortsRangesNotAllowed:
                  summary: Ranges at devicePorts are not allowed
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Ranges not allowed: devicePorts"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              example:
                status: 409
                code: CONFLICT
                message: "Another session is created for the same device"
        "500":
          $ref: "#/components/responses/Generic500"
        "501":
          $ref: "#/components/responses/Generic501"
        "503":
          $ref: "#/components/responses/Generic503"
  /sessions/{sessionId}:
    get:
      tags:
        - QoS sessions
      summary: "Get session information"
      operationId: getSession
      parameters:
        - name: sessionId
          in: path
          description: Session ID that was obtained from the createSession operation
          required: true
          schema:
            $ref: "#/components/schemas/SessionId"
      responses:
        "200":
          description: Contains information about active session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionInfo"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/SessionNotFound404"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
    delete:
      tags:
        - QoS sessions
      summary: "Free resources related to QoS session"
      operationId: deleteSession
      parameters:
        - name: sessionId
          in: path
          description: Session ID that was obtained from the createSession operation
          required: true
          schema:
            $ref: "#/components/schemas/SessionId"
      responses:
        "204":
          description: Session deleted
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/SessionNotFound404"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
  /notifications:
    post:
      tags:
        - Session notifications callback
      summary: "Session notifications callback"
      description: |
        Important: this endpoint is to be implemented by the API consumer.
        The QoD server will call this endpoint whenever any network related event occurs.
        Currently only QOS_STATUS_CHANGED event is defined.
      operationId: postNotification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Notification"
      responses:
        "204":
          description: Successful notification
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
      security:
        - apiKey: []
  /qos-profiles:
    get:
      tags:
        - QoS Profiles
      summary: "Get All QoS Profiles"
      operationId: getQosProfiles
      parameters:
        - name: id
          in: query
          schema:
            type: string
          required: false
        - name: status
          in: query
          schema:
            $ref: '#/components/schemas/QosProfileStatusEnum'
          required: false
        - name: targetMinimumUpstreamRate
          in: query
          schema:
            $ref: '#/components/schemas/Rate'
          required: false
        - name: maxUpstreamRate
          in: query
          schema:
            $ref: '#/components/schemas/Rate'
          required: false
        - name: maxUpstreamBurstRate
          in: query
          schema:
            $ref: '#/components/schemas/Rate'
          required: false
        - name: targetMinimumDownstreamRate
          in: query
          schema:
            $ref: '#/components/schemas/Rate'
          required: false
        - name: maxDownstreamRate
          in: query
          schema:
            $ref: '#/components/schemas/Rate'
          required: false
        - name: maxDownstreamBurstRate
          in: query
          schema:
            $ref: '#/components/schemas/Rate'
          required: false
        - name: minDuration
          in: query
          schema:
            $ref: '#/components/schemas/Duration'
          required: false
        - name: maxDuration
          in: query
          schema:
            $ref: '#/components/schemas/Duration'
          required: false
        - name: priority
          in: query
          schema:
            type: number
            format: float
          required: false
        - name: packetDelayBudget
          in: query
          schema:
            $ref: '#/components/schemas/Duration'
          required: false
        - name: jitter
          in: query
          schema:
            $ref: '#/components/schemas/Duration'
          required: false
        - name: packetErrorLossRate
          in: query
          schema:
            type: integer
          required: false
      responses:
        "200":
          description: Contains information about QoS Profiles
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/ExtendedQosProfile"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/QosProfilesNotFound404"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              example:
                code: INTERNAL
                message: "Could not get QoS Profiles"
        "503":
          $ref: "#/components/responses/Generic503"
  /qos-profiles/{qos-profile-id}:
    get:
      tags:
        - QoS Profiles
      summary: "Get QoS Profile for a given ID"
      operationId: getQosProfiles
      parameters:
        - name: qos-profile-id
          in: path
          description: QoS Profile ID that was obtained from the createProfile operation
          required: true
          schema:
            type: string
            example: foo-bar
            description: Unique generated ID for a QoS Profile
            minLength: 3
            maxLength: 128
            format: string
      responses:
        "200":
          description: Contains information about QoS Profiles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExtendedQosProfile"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/QosProfileNotFound404"
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              example:
                code: INTERNAL
                message: "Could not get QoS Profile"
        "503":
          $ref: "#/components/responses/Generic503"
components:
  securitySchemes:
    oAuth2ClientCredentials:
      type: oauth2
      description: This API uses OAuth 2 with the client credentials grant flow.
      flows:
        clientCredentials:
          tokenUrl: "{tokenUrl}"
          scopes: {}
    apiKey:
      type: apiKey
      description: API key to authorize requests
      name: apikey
      in: query
  schemas:
    SessionId:
      type: string
      format: uuid
      description: Session ID in UUID format
    SessionInfo:
      description: Session related information.
      allOf:
        - $ref: "#/components/schemas/CreateSession"
        - type: object
          required:
            - sessionId
            - duration
            - startedAt
            - expiresAt
            - qosStatus
          properties:
            sessionId:
              $ref: "#/components/schemas/SessionId"
            startedAt:
              type: integer
              example: 1639479600
              description: Timestamp of session start in seconds since unix epoch
              format: int64
            expiresAt:
              type: integer
              example: 1639566000
              description: Timestamp of session expiration if the session was not deleted, in seconds since unix epoch
              format: int64
            qosStatus:
              $ref: "#/components/schemas/QosStatus"
            messages:
              type: array
              items:
                $ref: "#/components/schemas/Message"
    CreateSession:
      description: Data type with attributes required for creating a session
      type: object
      properties:
        duration:
          type: integer
          example: 86400
          description: |
            Session duration in seconds. Maximal value of 24 hours is used if not set.
            After session has expired the client will receive QOS_STATUS_CHANGED event with 
             - qosStatus is 'UNAVAILABLE', and, 
             - statusInfo is 'DURATION_EXPIRED'. 
            See notification callback.
          format: int32
          minimum: 1
          maximum: 86400
          default: 86400
        device:
          $ref: "#/components/schemas/Device"
        applicationServer:
          $ref: "#/components/schemas/ApplicationServer"
        devicePorts:
          $ref: "#/components/schemas/PortsSpec"
        applicationServerPorts:
          $ref: "#/components/schemas/PortsSpec"
        qosProfile:
          oneOf:
            - $ref: "#/components/schemas/QosProfile"
            - $ref: "#/components/schemas/QoSProfileId"
        notificationUrl:
          type: string
          format: uri
          example: "https://application-server.com"
          description: Allows asynchronous delivery of session related events
        notificationAuthToken:
          type: string
          example: "c8974e592c2fa383d4a3960714"
          description: Authentication token for callback API
      required:
        - device
        - applicationServer
        - qosProfile
    Port:
      type: integer
      minimum: 0
      maximum: 65535
    PortsSpec:
      type: object
      minProperties: 1
      properties:
        ranges:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - from
              - to
            properties:
              from:
                $ref: "#/components/schemas/Port"
              to:
                $ref: "#/components/schemas/Port"
        ports:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/Port"
      example:
        ranges:
          - from: 5010
            to: 5020
        ports:
          - 5060
          - 5070
      description: |
        Ports may be specified as a list of ranges or single ports.
    QoSProfileId:
      type: string
      example: 123e4567-e89b-12d3-a456-426614174000
      description: |
        Unique ID of the QoS Profile to be used for this session.
      minLength: 36
      maxLength: 36
      format: string
    ExtendedQosProfile:
      description: Data type with attributes of a QosProfile
      type: object
      properties:
        id:
          $ref: "#/components/schemas/QoSProfileId"
        name:
          type: string
          example: QCI_1_voice
          description: Descriptive name for QoS Profile
          minLength: 3
          maxLength: 128
          format: string
        status:
          $ref: "#/components/schemas/QosProfileStatusEnum"
          description: The status of the profile.  See QosProfileStatusEnum for description.
        targetMinUpstreamRate:
          $ref: "#/components/schemas/Rate"
          description: The target minimum data rate.  Set to zero when no target minimum is defined in this profile.
        maxUpstreamRate:
          $ref: "#/components/schemas/Rate"
          description: |
            The maximum best effort data
            Equal to targetMinimumUpstreamRate when max is the as the target. 
        maxUpstreamBurstRate:
          $ref: "#/components/schemas/Rate"
          description: |
            The burst rate for best effort data
        targetMinDownstreamRate:
          $ref: "#/components/schemas/Rate"
          description: The target minimum data rate.  Set to zero when no target minimum is defined in this profile.
        maxDownstreamRate:
          $ref: "#/components/schemas/Rate"
          description: |
            The maximum best effort rate
            Equal to targetMinimumUpstreamRate when max is the as the target. 
        maxDownstreamBurstRate:
          $ref: "#/components/schemas/Rate"
          description: |
            The maximum best effort burst rate
            Equal to targetMinimumUpstreamRate when max is the as the target. 
        minDuration:
          $ref: "#/components/schemas/Duration"
          description: The shortest time period that is supported this profile can be deployed.
        maxDuration:
          $ref: "#/components/schemas/Duration"
          description: The maximum length of time that this profile can be deployed.
        priority:
          type: number
          example: 5.0
          description: |
            Priority for this session
          format: float
          minimum: 0
          maximum: 10
          default: 5
        packetDelayBudget:
          $ref: "#/components/schemas/Duration"
          description: The maximum latency for a packet.
        jitter:
          $ref: "#/components/schemas/Duration"
          description: |
            Jitter refers to the variation in the time it takes for none queue building
            packets to travel across a network measured in milliseconds (ms). In terms of
            maximum deviation for round trip latency on a network, jitter can be defined
            as the difference between the highest and lowest latency values experienced
            by the 99th percentile of traffic.
          
            To be more specific, if we consider the round trip latency values of the 99th
            percentile of traffic, jitter is the measure of how much these values deviate
            from the average round trip latency for this percentile. A low jitter value
            indicates that the latency values are relatively consistent, whereas a high
            jitter value implies that there is a significant variation in latency times,
            which can negatively impact the performance of real-time applications such as
            VoIP, video conferencing, and online gaming.
        packetErrorLossRate:
          type: integer
          description: |
            The exponential power of the allowable error loss rate.
            For instance 10 would be an error loss rate of 2 to the power of -10 (0.0009765625)
          format: int32
          minimum: 1
          maximum: 10
          example: 5
          default: 1
    Rate:
      type: object
      description: Data rate value and unit
      properties:
        value:
          type: integer
          example: 100
          format: int32
          minimum: 0
          maximum: 1024
        unit:
          $ref: "#/components/schemas/RateUnitEnum"
    Duration:
      type: object
      description: Value and unit of time
      properties:
        value:
          type: integer
          example: 12
          format: int32
          minimum: 1
        unit:
          $ref: "#/components/schemas/TimeUnitEnum"
          example: Minutes
    TimeUnitEnum:
      description: |
        Days
        Hours
        Minutes
        Seconds
        Milliseconds
        Microseconds
        Nanoseconds
      type: string
      enum:
        - Days
        - Hours
        - Minutes
        - Seconds
        - Milliseconds
        - Microseconds
        - Nanoseconds
    QosProfileStatusEnum:
      description: |
        The current status of the QoS Profile
        - Active - QoS Profile is available to be used
        - Inactive - QoS Profile is not currently available to be deployed
        - Deprecated - QoS profile is actively being used in a QoD session, but can not be deployed in new QoD sessions
      type: string
      enum:
        - Active
        - Inactive
        - Deprecated
    RateUnitEnum:
      description: |
        The unit of measurement for rate.
        bps - Bits per second
        Kbps - Kilobits per second
        Mbps - Megabits per second
        Gbps - Gigabits per second
        Tbps - Terabits per second
      type: string
      enum:
        - Kbps
        - Mbps
        - Gbps
        - Tbps
    QosProfile:
      type: string
      enum:
        - QOS_E
        - QOS_S
        - QOS_M
        - QOS_L
      description: |
        * `QOS_E` - Qualifier for enhanced communication profile
        * `QOS_S` - Qualifier for the requested QoS profile _S_
        * `QOS_M` - Qualifier for the requested QoS profile _M_
        * `QOS_L` - Qualifier for the requested QoS profile _L_

    Notification:
      type: object
      required:
        - sessionId
        - eventReports
      properties:
        sessionId:
          $ref: "#/components/schemas/SessionId"
        eventReports:
          type: array
          items:
            $ref: "#/components/schemas/EventReport"
          minItems: 1
          description: Contains the reported event and applicable information
    EventReport:
      oneOf:
        - $ref: '#/components/schemas/QosStatusChangedEventReport'
      discriminator:
        propertyName: eventType
        mapping:
          QOS_STATUS_CHANGED: "#/components/schemas/QosStatusChangedEventReport"
    QosStatusChangedEventReport:
      type: object
      required:
        - eventType
        - qosStatus
      properties:
        eventType:
          $ref: "#/components/schemas/SessionEventType"
        qosStatus:
          $ref: "#/components/schemas/QosStatus"
        statusInfo:
          $ref: "#/components/schemas/StatusInfo"
    StatusInfo:
          type: string
          enum:
            - DURATION_EXPIRED
            - NETWORK_TERMINATED
          description: |
            Reason for the new `qosStatus`. Currently `statusInfo` is only applicable when `qosStatus` is 'UNAVAILABLE'.
            * `DURATION_EXPIRED` - Session terminated due to requested duration expired
            * `NETWORK_TERMINATED` - Network terminated the session before the requested duration expired

    SessionEventType:
      type: string
      enum:
        - QOS_STATUS_CHANGED
    
    Device:
      type: object
      minProperties: 1
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        networkAccessIdentifier:
          $ref: "#/components/schemas/NetworkAccessIdentifier"
        ipv4Address:
          $ref: "#/components/schemas/Ipv4Address"
        ipv6Address:
          $ref: "#/components/schemas/Ipv6Address"
      description: Device identifier
    ApplicationServer:
      type: object
      minProperties: 1
      properties:
        ipv4Address:
          $ref: "#/components/schemas/Ipv4Address"
        ipv6Address:
          $ref: "#/components/schemas/Ipv6Address"
      description: Application server identifier
    NetworkAccessIdentifier:
      type: string
      example: "123456789@domain.com"
    PhoneNumber:
      type: string
      pattern: '^\+?[0-9]{5,15}$'
      example: "123456789"
      description: Subscriber number in E.164 format (starting with country code). Optionally prefixed with '+'.
    Ipv4Address:
      type: string
      format: ipv4
      pattern: '^([01]?\d\d?|2[0-4]\d|25[0-5])(?:\.(?:[01]?\d\d?|2[0-4]\d|25[0-5])){3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
      example: "192.168.0.1/24"
      description: |
        IPv4 address may be specified in form <address/mask> as:
          - address - an IPv4 number in dotted-quad form 1.2.3.4. Only this exact IP number will match the flow control rule.
          - address/mask - an IP number as above with a mask width of the form 1.2.3.4/24.
            In this case, all IP numbers from 1.2.3.0 to 1.2.3.255 will match. The bit width MUST be valid for the IP version.
    Ipv6Address:
      type: string
      format: ipv6
      allOf:
        - pattern: '^((:|(0?|([1-9a-f][0-9a-f]{0,3}))):)((0?|([1-9a-f][0-9a-f]{0,3})):){0,6}(:|(0?|([1-9a-f][0-9a-f]{0,3})))(\/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))?$'
        - pattern: '^((([^:]+:){7}([^:]+))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?))(\/.+)?$'
      example: "2001:db8:85a3:8d3:1319:8a2e:370:7344"
      description: |
        IPv6 address, following IETF 5952 format, may be specified in form <address/mask> as:
          - address - The /128 subnet is optional for single addresses:
            - 2001:db8:85a3:8d3:1319:8a2e:370:7344
            - 2001:db8:85a3:8d3:1319:8a2e:370:7344/128
          - address/mask - an IP v6 number with a mask:
            - 2001:db8:85a3:8d3::0/64
            - 2001:db8:85a3:8d3::/64
    Message:
      type: object
      properties:
        severity:
          type: string
          enum: ["INFO", "WARNING"]
          description: Message severity
        description:
          type: string
          description: Detailed message text
      required:
        - severity
        - description
    QosStatus:
      type: string
      enum:
        - REQUESTED
        - AVAILABLE
        - UNAVAILABLE
      description: |
        * `REQUESTED` - QoS has been requested by creating a session
        * `AVAILABLE` - The requested QoS has been provided by the network
        * `UNAVAILABLE` - The requested QoS cannot be provided by the network due to some reason
    ErrorInfo:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP status code returned along with this error response
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description
  responses:
    Generic400:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 400
            code: INVALID_ARGUMENT
            message: "Schema validation failed at  ..."
    Generic401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 401
            code: UNAUTHENTICATED
            message: "Authorization failed: ..."
    Generic403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 403
            code: PERMISSION_DENIED
            message: "Operation not allowed: ..."
    SessionNotFound404:
      description: Session not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 404
            code: NOT_FOUND
            message: "Session Id does not exist"
    QosProfilesNotFound404:
      description: Qos Profiles not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            code: NOT_FOUND
            message: "No QoS Profiles found exist"
    QosProfileNotFound404:
      description: Qos Profile not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            code: NOT_FOUND
            message: "QosProfile Id does not exist"
    Generic500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 500
            code: INTERNAL
            message: "Internal server error: ..."
    Generic501:
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 501
            code: NOT_IMPLEMENTED
            message: "Service not implemented for the specified user device"
    Generic503:
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 503
            code: UNAVAILABLE
            message: "Service unavailable"
